---
import Layout from "../layouts/Layout.astro"
---

<Layout>
	<main>
		<div></div>
	</main>
</Layout>

<script>
	import { getDistance } from "pathcrafter"
	import {
		Path,
		createPoint2d,
		getElementEdgePoint,
		getElementRect,
		pathcrafter,
	} from "pathcrafter"

	const div = document.querySelector("main > div")
	if (!div) throw new Error("div not found")

	// P
	const p1a = new Path(() => getElementEdgePoint(div, "bottom", 0))
		.addVertical(() => getElementRect(div).height * -1)
		.addDiagonal(() => {
			const length = getElementRect(div).width * 0.04
			return createPoint2d(length, length)
		})
		.addDiagonal(() => {
			const length = getElementRect(div).width * 0.04
			return createPoint2d(-length, length)
		}, "last")
	const p1b = p1a.deriveParallel(-4)
	const p1c = p1b.deriveParallel(-6)
	const p1d = p1c.deriveParallel(-8)

	// A
	const a1a = new Path(() => getElementEdgePoint(div, "bottom", 6))
		.addDiagonal((pos) =>
			getDistance(pos, getElementEdgePoint(div, "top", 9)),
		)
		.addDiagonal((pos) =>
			getDistance(pos, getElementEdgePoint(div, "bottom", 12)),
		)
	const a1b = a1a.deriveParallel(4)
	const a1c = a1b.deriveParallel(4)
	const a1d = new Path(() => {
		const { x } = getElementEdgePoint(div, "bottom", 6)
		const { y } = getElementEdgePoint(div, "left", 50)
		return { x, y }
	}).addHorizontal(() => getElementRect(div).width * 0.06)
	const a1e = a1d.deriveParallel(4)

	// T
	const tTopA = new Path(() => {
		const { x, y } = getElementEdgePoint(div, "top", 3)
		return { x, y: y }
	}).addHorizontal(() => getElementRect(div).width * 0.97)
	const tTopB = tTopA.deriveParallel(-12)
	const tTopC = tTopA.deriveParallel(-15)
	const t1a = new Path(() => getElementEdgePoint(div, "bottom", 14), {
		fill: "black",
	})
		.addVertical(() => getElementRect(div).height * -1)
		.addHorizontal(() => getElementRect(div).width * 0.01)
		.addVertical(() => getElementRect(div).height)

	// H
	const hA = new Path(() =>
		getElementEdgePoint(div, "bottom", 17.5),
	).addVertical(() => getElementRect(div).height * -1)
	const hB = hA.deriveParallel(4)
	const hC = new Path(() =>
		getElementEdgePoint(div, "bottom", 25),
	).addVertical(() => getElementRect(div).height * -1)
	const hD = hC.deriveParallel(-4)
	const hE = new Path(() => {
		const { x } = getElementEdgePoint(div, "bottom", 17.5)
		const { y } = getElementEdgePoint(div, "left", 50)
		return { x, y }
	}).addHorizontal(() => getElementRect(div).width * 0.075)
	const hF = hE.deriveParallel(4)
	const hG = hE.deriveParallel(-4)

	// C
	const cA = new Path(() =>
		getElementEdgePoint(div, "bottom", 35),
	).addQuadratic(
		() => createPoint2d(0, getElementRect(div).height * -1),
		() => {
			const rect = getElementRect(div)
			return createPoint2d(rect.width * -0.16, rect.height * -0.5)
		},
	)
	const cB = new Path(() => getElementEdgePoint(div, "bottom", 35))

	// R
	const rA = new Path(() => getElementEdgePoint(div, "bottom", 38))
		.addVertical(() => getElementRect(div).height * -1, "vert")
		.addQuadratic(
			() => createPoint2d(0, getElementRect(div).height * 0.8),
			() => {
				const rect = getElementRect(div)
				return createPoint2d(rect.width * 0.16, rect.height * 0.4)
			},
		)
		.addDiagonal((pos) =>
			getDistance(pos, getElementEdgePoint(div, "bottom", 46)),
		)
	const rB = rA.derivePartial("vert").deriveParallel(4)
	const rC = rB.deriveParallel(6)

	// A
	const a2a = new Path(() => getElementEdgePoint(div, "bottom", 48))
		.addDiagonal((pos) =>
			getDistance(pos, getElementEdgePoint(div, "top", 51)),
		)
		.addDiagonal((pos) =>
			getDistance(pos, getElementEdgePoint(div, "bottom", 54)),
		)
	const a2b = a2a.deriveParallel(4)
	const a2c = a2b.deriveParallel(5)
	const a2d = a2c.deriveParallel(6)
	const a2e = new Path(
		() => {
			const { x } = getElementEdgePoint(div, "bottom", 48)
			const { y } = getElementEdgePoint(div, "left", 50)
			return { x, y }
		},
		{ fill: "black" },
	)
		.addHorizontal(() => getElementRect(div).width * 0.14)
		.addVertical(10)
		.addHorizontal(() => getElementRect(div).width * -0.14)

	// F
	const fA = new Path(() => getElementEdgePoint(div, "bottom", 57))
		.addVertical(() => getElementRect(div).height * -1)
		.addHorizontal(() => getElementRect(div).width * 0.1)
	const fB = fA.deriveParallel(5)
	const fC = fB.deriveParallel(5)

	// T
	const t2A = new Path(() =>
		getElementEdgePoint(div, "bottom", 69.5),
	).addVertical(() => getElementRect(div).height * -1)
	const t2B = t2A.deriveParallel(6)
	const t2C = t2A.deriveParallel(-6)
	const t2D = t2B.deriveParallel(3)
	const t2E = t2C.deriveParallel(-3)

	// E
	const eA = new Path(() => getElementEdgePoint(div, "bottom", 85))
		.addHorizontal(
			(pos) => getDistance(pos, getElementEdgePoint(div, "bottom", 72)).x,
		)
		.addVertical(() => getElementRect(div).height * -1)
		.addHorizontal(
			(pos) => getDistance(pos, getElementEdgePoint(div, "bottom", 85)).x,
		)
	const eB = eA.deriveParallel(5)
	const eC = eB.deriveParallel(10)
	const eD = new Path(() => {
		const { x } = getElementEdgePoint(div, "bottom", 72)
		const { y } = getElementEdgePoint(div, "left", 50)
		return createPoint2d(x, y)
	}).addHorizontal(() => getElementRect(div).width * 0.08)

	// R
	const r2a = new Path(() => getElementEdgePoint(div, "bottom", 87.5))
		.addVertical(() => getElementRect(div).height * -1)
		.addHorizontal(
			(pos) =>
				getDistance(pos, getElementEdgePoint(div, "bottom", 100)).x,
		)
		.addVertical(() => getElementRect(div).height * 0.6)
		.addHorizontal(
			(pos) =>
				getDistance(pos, getElementEdgePoint(div, "bottom", 87.5)).x,
		)
		.addDiagonal((pos) =>
			getDistance(pos, getElementEdgePoint(div, "bottom", 100)),
		)
	const r2b = r2a.deriveParallel(-12)
	const r2c = r2a.deriveParallel(-15)

	const { update } = pathcrafter([
		// P
		p1a,
		p1b,
		p1c,
		p1d,
		// A
		a1a,
		a1b,
		a1c,
		a1d,
		a1e,
		// T
		tTopA,
		tTopB,
		tTopC,
		t1a,
		// H
		hA,
		hB,
		hC,
		hD,
		hE,
		hF,
		hG,
		// C
		cA,
		cB,
		// R
		rA,
		rB,
		rC,
		// A
		a2a,
		a2b,
		a2c,
		a2d,
		a2e,
		// F
		fA,
		fB,
		fC,
		// T
		t2A,
		t2B,
		t2C,
		t2D,
		t2E,
		// E
		eA,
		eB,
		eC,
		eD,
		// R
		r2a,
		r2b,
		r2c,
	])
	window.addEventListener("resize", update)
</script>

<style>
	main {
		width: 100vw;
		height: 100vh;
		display: flex;
		justify-content: center;
		align-items: center;
	}

	div {
		width: 75%;
		height: 25%;
	}
</style>
